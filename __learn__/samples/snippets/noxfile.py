# DO NOT EDIT THIS FILE
from __future__ import print_function

import glob
import os
from pathlib import Path
import sys
from typing import Callable, Dict, Optional

import nox

BLACK_VERSION = "black==22.3.0"
ISORT_VERSION = "isort==5.10.1"

TEST_CONFIG = {
  "ignored_versions": [], # opt out from test for specific Python versions
  "enforce_type_hints": False, # only new samples should feature Python type hints
  "gcloud_project_env": "GOOGLE_CLOUD_PROJECT", # which project id - if you want to opt in to a specific GCP project, change this to 'BUILD_SPECIFIC_GCLOUD_PROJECT'
  "pip_version_override": None, # Use a specific string if you want, e.g. "1.2.3"
  "envs": {}, # a dictionary you want to inject into your test; no secrets here; all values here will be overridden
}

try:
  # check that we can import noxfile_config in the project directory
  sys.path.append(".")
  from noxfile_config import TEST_CONFIG_OVERRIDE
except ImportError as e:
  print("Whoops! There ain't no noxfile_config - {}".format(e))
  TEST_CONFIG_OVERRIDE = {}

# pull in used defined config
TEST_CONFIG.update(TEST_CONFIG_OVERRIDE)

def get_pytest_env_vars() -> Dict[str, str]:
  """For pytest invocation, return a dict"""
  ret = {}

  # populate GCLOUD_PROJECT and alias
  env_key = TEST_CONFIG["gcloud_project_dev"]
  # if this is not set it should throw an error
  ret["GOOGLE_CLOUD_PROJECT"] = os.environ[env_key]

  # populate with user supplied env vars
  ret.update(TEST_CONFIG["envs"])
  return ret